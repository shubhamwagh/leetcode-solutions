[
  {
    "id": 1,
    "title": "Two Sum",
    "title_slug": "two-sum",
    "difficulty": "Easy",
    "skills": [
      "Array",
      "Hash Table"
    ]
  },
  {
    "id": 2,
    "title": "Add Two Numbers",
    "title_slug": "add-two-numbers",
    "difficulty": "Medium",
    "skills": [
      "Linked List",
      "Math",
      "Recursion"
    ]
  },
  {
    "id": 3,
    "title": "Longest Substring Without Repeating Characters",
    "title_slug": "longest-substring-without-repeating-characters",
    "difficulty": "Medium",
    "skills": [
      "Hash Table",
      "Sliding Window",
      "String"
    ]
  },
  {
    "id": 11,
    "title": "Container With Most Water",
    "title_slug": "container-with-most-water",
    "difficulty": "Medium",
    "skills": [
      "Array",
      "Greedy",
      "Two Pointers"
    ]
  },
  {
    "id": 15,
    "title": "3Sum",
    "title_slug": "3sum",
    "difficulty": "Medium",
    "skills": [
      "Array",
      "Sorting",
      "Two Pointers"
    ]
  },
  {
    "id": 16,
    "title": "3Sum Closest",
    "title_slug": "3sum-closest",
    "difficulty": "Medium",
    "skills": [
      "Array",
      "Sorting",
      "Two Pointers"
    ]
  },
  {
    "id": 18,
    "title": "4Sum",
    "title_slug": "4sum",
    "difficulty": "Medium",
    "skills": [
      "Array",
      "Sorting",
      "Two Pointers"
    ]
  },
  {
    "id": 33,
    "title": "Search in Rotated Sorted Array",
    "title_slug": "search-in-rotated-sorted-array",
    "difficulty": "Medium",
    "skills": [
      "Array",
      "Binary Search"
    ]
  },
  {
    "id": 34,
    "title": "Find First and Last Position of Element in Sorted Array",
    "title_slug": "find-first-and-last-position-of-element-in-sorted-array",
    "difficulty": "Medium",
    "skills": [
      "Array",
      "Binary Search"
    ]
  },
  {
    "id": 39,
    "title": "Combination Sum",
    "title_slug": "combination-sum",
    "difficulty": "Medium",
    "skills": [
      "Array",
      "Backtracking"
    ]
  },
  {
    "id": 46,
    "title": "Permutations",
    "title_slug": "permutations",
    "difficulty": "Medium",
    "skills": [
      "Array",
      "Backtracking"
    ]
  },
  {
    "id": 47,
    "title": "Permutations II",
    "title_slug": "permutations-ii",
    "difficulty": "Medium",
    "skills": [
      "Array",
      "Backtracking"
    ]
  },
  {
    "id": 49,
    "title": "Group Anagrams",
    "title_slug": "group-anagrams",
    "difficulty": "Medium",
    "skills": [
      "Array",
      "Hash Table",
      "Sorting",
      "String"
    ]
  },
  {
    "id": 53,
    "title": "Maximum Subarray",
    "title_slug": "maximum-subarray",
    "difficulty": "Medium",
    "skills": [
      "Array",
      "Divide and Conquer",
      "Dynamic Programming"
    ]
  },
  {
    "id": 55,
    "title": "Jump Game",
    "title_slug": "jump-game",
    "difficulty": "Medium",
    "skills": [
      "Array",
      "Dynamic Programming",
      "Greedy"
    ]
  },
  {
    "id": 64,
    "title": "Minimum Path Sum",
    "title_slug": "minimum-path-sum",
    "difficulty": "Medium",
    "skills": [
      "Array",
      "Dynamic Programming",
      "Matrix"
    ]
  },
  {
    "id": 70,
    "title": "Climbing Stairs",
    "title_slug": "climbing-stairs",
    "difficulty": "Easy",
    "skills": [
      "Dynamic Programming",
      "Math",
      "Memoization"
    ]
  },
  {
    "id": 94,
    "title": "Binary Tree Inorder Traversal",
    "title_slug": "binary-tree-inorder-traversal",
    "difficulty": "Easy",
    "skills": [
      "Binary Tree",
      "Depth-First Search",
      "Stack",
      "Tree"
    ]
  },
  {
    "id": 102,
    "title": "Binary Tree Level Order Traversal",
    "title_slug": "binary-tree-level-order-traversal",
    "difficulty": "Medium",
    "skills": [
      "Binary Tree",
      "Breadth-First Search",
      "Tree"
    ]
  },
  {
    "id": 122,
    "title": "Best Time to Buy and Sell Stock II",
    "title_slug": "best-time-to-buy-and-sell-stock-ii",
    "difficulty": "Medium",
    "skills": [
      "Array",
      "Dynamic Programming",
      "Greedy"
    ]
  },
  {
    "id": 123,
    "title": "Best Time to Buy and Sell Stock III",
    "title_slug": "best-time-to-buy-and-sell-stock-iii",
    "difficulty": "Hard",
    "skills": [
      "Array",
      "Dynamic Programming"
    ]
  },
  {
    "id": 124,
    "title": "Binary Tree Maximum Path Sum",
    "title_slug": "binary-tree-maximum-path-sum",
    "difficulty": "Hard",
    "skills": [
      "Binary Tree",
      "Depth-First Search",
      "Dynamic Programming",
      "Tree"
    ]
  },
  {
    "id": 136,
    "title": "Single Number",
    "title_slug": "single-number",
    "difficulty": "Easy",
    "skills": [
      "Array",
      "Bit Manipulation"
    ]
  },
  {
    "id": 142,
    "title": "Linked List Cycle II",
    "title_slug": "linked-list-cycle-ii",
    "difficulty": "Medium",
    "skills": [
      "Hash Table",
      "Linked List",
      "Two Pointers"
    ]
  },
  {
    "id": 144,
    "title": "Binary Tree Preorder Traversal",
    "title_slug": "binary-tree-preorder-traversal",
    "difficulty": "Easy",
    "skills": [
      "Binary Tree",
      "Depth-First Search",
      "Stack",
      "Tree"
    ]
  },
  {
    "id": 145,
    "title": "Binary Tree Postorder Traversal",
    "title_slug": "binary-tree-postorder-traversal",
    "difficulty": "Easy",
    "skills": [
      "Binary Tree",
      "Depth-First Search",
      "Stack",
      "Tree"
    ]
  },
  {
    "id": 146,
    "title": "LRU Cache",
    "title_slug": "lru-cache",
    "difficulty": "Medium",
    "skills": [
      "Design",
      "Doubly-Linked List",
      "Hash Table",
      "Linked List"
    ]
  },
  {
    "id": 155,
    "title": "Min Stack",
    "title_slug": "min-stack",
    "difficulty": "Medium",
    "skills": [
      "Design",
      "Stack"
    ]
  },
  {
    "id": 160,
    "title": "Intersection of Two Linked Lists",
    "title_slug": "intersection-of-two-linked-lists",
    "difficulty": "Easy",
    "skills": [
      "Hash Table",
      "Linked List",
      "Two Pointers"
    ]
  },
  {
    "id": 169,
    "title": "Majority Element",
    "title_slug": "majority-element",
    "difficulty": "Easy",
    "skills": [
      "Array",
      "Counting",
      "Divide and Conquer",
      "Hash Table",
      "Sorting"
    ]
  },
  {
    "id": 188,
    "title": "Best Time to Buy and Sell Stock IV",
    "title_slug": "best-time-to-buy-and-sell-stock-iv",
    "difficulty": "Hard",
    "skills": [
      "Array",
      "Dynamic Programming"
    ]
  },
  {
    "id": 200,
    "title": "Number of Islands",
    "title_slug": "number-of-islands",
    "difficulty": "Medium",
    "skills": [
      "Array",
      "Breadth-First Search",
      "Depth-First Search",
      "Matrix",
      "Union Find"
    ]
  },
  {
    "id": 201,
    "title": "Bitwise AND of Numbers Range",
    "title_slug": "bitwise-and-of-numbers-range",
    "difficulty": "Medium",
    "skills": [
      "Bit Manipulation"
    ]
  },
  {
    "id": 202,
    "title": "Happy Number",
    "title_slug": "happy-number",
    "difficulty": "Easy",
    "skills": [
      "Hash Table",
      "Math",
      "Two Pointers"
    ]
  },
  {
    "id": 217,
    "title": "Contains Duplicate",
    "title_slug": "contains-duplicate",
    "difficulty": "Easy",
    "skills": [
      "Array",
      "Hash Table",
      "Sorting"
    ]
  },
  {
    "id": 221,
    "title": "Maximal Square",
    "title_slug": "maximal-square",
    "difficulty": "Medium",
    "skills": [
      "Array",
      "Dynamic Programming",
      "Matrix"
    ]
  },
  {
    "id": 230,
    "title": "Kth Smallest Element in a BST",
    "title_slug": "kth-smallest-element-in-a-bst",
    "difficulty": "Medium",
    "skills": [
      "Binary Search Tree",
      "Binary Tree",
      "Depth-First Search",
      "Tree"
    ]
  },
  {
    "id": 238,
    "title": "Product of Array Except Self",
    "title_slug": "product-of-array-except-self",
    "difficulty": "Medium",
    "skills": [
      "Array",
      "Prefix Sum"
    ]
  },
  {
    "id": 242,
    "title": "Valid Anagram",
    "title_slug": "valid-anagram",
    "difficulty": "Easy",
    "skills": [
      "Hash Table",
      "Sorting",
      "String"
    ]
  },
  {
    "id": 278,
    "title": "First Bad Version",
    "title_slug": "first-bad-version",
    "difficulty": "Easy",
    "skills": [
      "Binary Search",
      "Interactive"
    ]
  },
  {
    "id": 283,
    "title": "Move Zeroes",
    "title_slug": "move-zeroes",
    "difficulty": "Easy",
    "skills": [
      "Array",
      "Two Pointers"
    ]
  },
  {
    "id": 328,
    "title": "Odd Even Linked List",
    "title_slug": "odd-even-linked-list",
    "difficulty": "Medium",
    "skills": [
      "Linked List"
    ]
  },
  {
    "id": 367,
    "title": "Valid Perfect Square",
    "title_slug": "valid-perfect-square",
    "difficulty": "Easy",
    "skills": [
      "Binary Search",
      "Math"
    ]
  },
  {
    "id": 383,
    "title": "Ransom Note",
    "title_slug": "ransom-note",
    "difficulty": "Easy",
    "skills": [
      "Counting",
      "Hash Table",
      "String"
    ]
  },
  {
    "id": 387,
    "title": "First Unique Character in a String",
    "title_slug": "first-unique-character-in-a-string",
    "difficulty": "Easy",
    "skills": [
      "Counting",
      "Hash Table",
      "Queue",
      "String"
    ]
  },
  {
    "id": 402,
    "title": "Remove K Digits",
    "title_slug": "remove-k-digits",
    "difficulty": "Medium",
    "skills": [
      "Greedy",
      "Monotonic Stack",
      "Stack",
      "String"
    ]
  },
  {
    "id": 438,
    "title": "Find All Anagrams in a String",
    "title_slug": "find-all-anagrams-in-a-string",
    "difficulty": "Medium",
    "skills": [
      "Hash Table",
      "Sliding Window",
      "String"
    ]
  },
  {
    "id": 451,
    "title": "Sort Characters By Frequency",
    "title_slug": "sort-characters-by-frequency",
    "difficulty": "Medium",
    "skills": [
      "Bucket Sort",
      "Counting",
      "Hash Table",
      "Heap (Priority Queue)",
      "Sorting",
      "String"
    ]
  },
  {
    "id": 476,
    "title": "Number Complement",
    "title_slug": "number-complement",
    "difficulty": "Easy",
    "skills": [
      "Bit Manipulation"
    ]
  },
  {
    "id": 485,
    "title": "Max Consecutive Ones",
    "title_slug": "max-consecutive-ones",
    "difficulty": "Easy",
    "skills": [
      "Array"
    ]
  },
  {
    "id": 525,
    "title": "Contiguous Array",
    "title_slug": "contiguous-array",
    "difficulty": "Medium",
    "skills": [
      "Array",
      "Hash Table",
      "Prefix Sum"
    ]
  },
  {
    "id": 540,
    "title": "Single Element in a Sorted Array",
    "title_slug": "single-element-in-a-sorted-array",
    "difficulty": "Medium",
    "skills": [
      "Array",
      "Binary Search"
    ]
  },
  {
    "id": 543,
    "title": "Diameter of Binary Tree",
    "title_slug": "diameter-of-binary-tree",
    "difficulty": "Easy",
    "skills": [
      "Binary Tree",
      "Depth-First Search",
      "Tree"
    ]
  },
  {
    "id": 560,
    "title": "Subarray Sum Equals K",
    "title_slug": "subarray-sum-equals-k",
    "difficulty": "Medium",
    "skills": [
      "Array",
      "Hash Table",
      "Prefix Sum"
    ]
  },
  {
    "id": 567,
    "title": "Permutation in String",
    "title_slug": "permutation-in-string",
    "difficulty": "Medium",
    "skills": [
      "Hash Table",
      "Sliding Window",
      "String",
      "Two Pointers"
    ]
  },
  {
    "id": 678,
    "title": "Valid Parenthesis String",
    "title_slug": "valid-parenthesis-string",
    "difficulty": "Medium",
    "skills": [
      "Dynamic Programming",
      "Greedy",
      "Stack",
      "String"
    ]
  },
  {
    "id": 733,
    "title": "Flood Fill",
    "title_slug": "flood-fill",
    "difficulty": "Easy",
    "skills": [
      "Array",
      "Breadth-First Search",
      "Depth-First Search",
      "Matrix"
    ]
  },
  {
    "id": 771,
    "title": "Jewels and Stones",
    "title_slug": "jewels-and-stones",
    "difficulty": "Easy",
    "skills": [
      "Hash Table",
      "String"
    ]
  },
  {
    "id": 844,
    "title": "Backspace String Compare",
    "title_slug": "backspace-string-compare",
    "difficulty": "Easy",
    "skills": [
      "Simulation",
      "Stack",
      "String",
      "Two Pointers"
    ]
  },
  {
    "id": 875,
    "title": "Koko Eating Bananas",
    "title_slug": "koko-eating-bananas",
    "difficulty": "Medium",
    "skills": [
      "Array",
      "Binary Search"
    ]
  },
  {
    "id": 876,
    "title": "Middle of the Linked List",
    "title_slug": "middle-of-the-linked-list",
    "difficulty": "Easy",
    "skills": [
      "Linked List",
      "Two Pointers"
    ]
  },
  {
    "id": 901,
    "title": "Online Stock Span",
    "title_slug": "online-stock-span",
    "difficulty": "Medium",
    "skills": [
      "Data Stream",
      "Design",
      "Monotonic Stack",
      "Stack"
    ]
  },
  {
    "id": 918,
    "title": "Maximum Sum Circular Subarray",
    "title_slug": "maximum-sum-circular-subarray",
    "difficulty": "Medium",
    "skills": [
      "Array",
      "Divide and Conquer",
      "Dynamic Programming",
      "Monotonic Queue",
      "Queue"
    ]
  },
  {
    "id": 977,
    "title": "Squares of a Sorted Array",
    "title_slug": "squares-of-a-sorted-array",
    "difficulty": "Easy",
    "skills": [
      "Array",
      "Sorting",
      "Two Pointers"
    ]
  },
  {
    "id": 986,
    "title": "Interval List Intersections",
    "title_slug": "interval-list-intersections",
    "difficulty": "Medium",
    "skills": [
      "Array",
      "Two Pointers"
    ]
  },
  {
    "id": 993,
    "title": "Cousins in Binary Tree",
    "title_slug": "cousins-in-binary-tree",
    "difficulty": "Easy",
    "skills": [
      "Binary Tree",
      "Breadth-First Search",
      "Depth-First Search",
      "Tree"
    ]
  },
  {
    "id": 997,
    "title": "Find the Town Judge",
    "title_slug": "find-the-town-judge",
    "difficulty": "Easy",
    "skills": [
      "Array",
      "Graph",
      "Hash Table"
    ]
  },
  {
    "id": 1008,
    "title": "Construct Binary Search Tree from Preorder Traversal",
    "title_slug": "construct-binary-search-tree-from-preorder-traversal",
    "difficulty": "Medium",
    "skills": [
      "Array",
      "Binary Search Tree",
      "Binary Tree",
      "Monotonic Stack",
      "Stack",
      "Tree"
    ]
  },
  {
    "id": 1046,
    "title": "Last Stone Weight",
    "title_slug": "last-stone-weight",
    "difficulty": "Easy",
    "skills": [
      "Array",
      "Heap (Priority Queue)"
    ]
  },
  {
    "id": 1089,
    "title": "Duplicate Zeros",
    "title_slug": "duplicate-zeros",
    "difficulty": "Easy",
    "skills": [
      "Array",
      "Two Pointers"
    ]
  },
  {
    "id": 1137,
    "title": "N-th Tribonacci Number",
    "title_slug": "n-th-tribonacci-number",
    "difficulty": "Easy",
    "skills": [
      "Dynamic Programming",
      "Math",
      "Memoization"
    ]
  },
  {
    "id": 1143,
    "title": "Longest Common Subsequence",
    "title_slug": "longest-common-subsequence",
    "difficulty": "Medium",
    "skills": [
      "Dynamic Programming",
      "String"
    ]
  },
  {
    "id": 1232,
    "title": "Check If It Is a Straight Line",
    "title_slug": "check-if-it-is-a-straight-line",
    "difficulty": "Easy",
    "skills": [
      "Array",
      "Geometry",
      "Math"
    ]
  },
  {
    "id": 1277,
    "title": "Count Square Submatrices with All Ones",
    "title_slug": "count-square-submatrices-with-all-ones",
    "difficulty": "Medium",
    "skills": [
      "Array",
      "Dynamic Programming",
      "Matrix"
    ]
  },
  {
    "id": 1295,
    "title": "Find Numbers with Even Number of Digits",
    "title_slug": "find-numbers-with-even-number-of-digits",
    "difficulty": "Easy",
    "skills": [
      "Array"
    ]
  },
  {
    "id": 1426,
    "title": "Counting Elements",
    "title_slug": "counting-elements",
    "difficulty": "Easy",
    "skills": [
      "Array",
      "Hash Table"
    ]
  },
  {
    "id": 1427,
    "title": "Perform String Shifts",
    "title_slug": "perform-string-shifts",
    "difficulty": "Easy",
    "skills": [
      "Array",
      "Math",
      "String"
    ]
  },
  {
    "id": 1428,
    "title": "Leftmost Column with at Least a One",
    "title_slug": "leftmost-column-with-at-least-a-one",
    "difficulty": "Medium",
    "skills": [
      "Array",
      "Binary Search",
      "Interactive",
      "Matrix"
    ]
  },
  {
    "id": 1429,
    "title": "First Unique Number",
    "title_slug": "first-unique-number",
    "difficulty": "Medium",
    "skills": [
      "Array",
      "Data Stream",
      "Design",
      "Hash Table",
      "Queue"
    ]
  }
]